name: ECS CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

env:
  SONAR_PROJECT_KEY: 3-Tier-web-architecture
  SONAR_ORG: ecs-ci-cd
  AWS_REGION: us-east-1
  ECS_TASK_DEFINITION: task-web-app
  ECS_CLUSTER: Full-stack-web-app
  ECS_SERVICE: web-app-service
  FRONTEND_IMAGE_NAME: your-frontend-image

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clone Repository
        run: |
          git clone https://github.com/holadmex/3-Tier-web-architecture.git

  #sonarcloud:
    #name: Code Analysis with SonarCloud
    #runs-on: ubuntu-latest
    #needs: build-and-deploy
    #steps:
      #- name: Checkout code
        #uses: actions/checkout@v4
        #with:
          #fetch-depth: 0
#
      #- name: SonarCloud Scan
        #uses: SonarSource/sonarcloud-github-action@master
        #env:
          #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          #SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          #SONAR_HOST_URL: https://sonarcloud.io

  docker-build-and-deploy:
    name: Build, Scan, and Deploy Frontend
    runs-on: ubuntu-latest
    #needs: sonarcloud
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker Image
        run: |
          docker build -t ${{ env.FRONTEND_IMAGE_NAME }}:${GITHUB_SHA::7} -f frontend/Dockerfile frontend/

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
          sudo mv ./bin/trivy /usr/local/bin/
  
      - name: Run Trivy Scan
        run: |
          trivy image --severity HIGH,CRITICAL ${{ env.FRONTEND_IMAGE_NAME }}:${GITHUB_SHA::7} || true

      - name: Tag and Push Docker Image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          docker tag ${{ env.FRONTEND_IMAGE_NAME }}:$IMAGE_TAG ${{ secrets.ECR_REPO }}:$IMAGE_TAG
          docker push ${{ secrets.ECR_REPO }}:$IMAGE_TAG

      - name: Update ECS Task Definition
        run: |
          # Fetch the current task definition
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            > task-definition.json

          # Prepare updated task definition
          jq --arg IMAGE "${{ secrets.ECR_REPO }}:${GITHUB_SHA::7}" \
            '.taskDefinition.containerDefinitions[].image = $IMAGE |
             del(.taskDefinition.taskDefinitionArn, 
                 .taskDefinition.revision, 
                 .taskDefinition.status, 
                 .taskDefinition.requiresAttributes, 
                 .taskDefinition.compatibilities,
                 .taskDefinition.tags)' \
            task-definition.json > updated-task-definition.json

          # Register the updated task definition
          newTaskDefinition=$(aws ecs register-task-definition \
            --family ${{ env.ECS_TASK_DEFINITION }} \
            --container-definitions "$(cat updated-task-definition.json)" \
            --requires-compatibilities FARGATE \
            --network-mode awsvpc \
            --cpu 1024 \
            --memory 3072 \
            --execution-role-arn arn:aws:iam::429841094792:role/todo-app-role)

          # Extract revision
          newTaskRevision=$(echo $newTaskDefinition | jq -r '.taskDefinition.revision')

          # Update ECS service
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ env.ECS_TASK_DEFINITION }}:$newTaskRevision

      - name: Send Notification on Failure
        if: failure()
        run: |
          echo "Deployment failed. Please check the workflow logs."
