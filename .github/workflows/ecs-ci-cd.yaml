name: ECS CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

env:
  FRONTEND_IMAGE: your-frontend-image:latest
  SONAR_PROJECT_KEY: 3-Tier-web-architecture
  SONAR_ORG: ecs-ci-cd
  AWS_REGION: us-east-1

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Clone Repository
        run: |
          git clone https://github.com/holadmex/3-Tier-web-architecture.git

  sonarcloud:
    name: Code Analysis with SonarCloud
    runs-on: ubuntu-latest
    needs: build-and-deploy # Run only after build-and-deploy completes
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io

  docker-build:
    name: Build Frontend Docker Image
    runs-on: ubuntu-latest
    needs: sonarcloud
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker Image
        run: |
          docker build -t ${{ env.FRONTEND_IMAGE }} -f frontend/Dockerfile frontend/

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
          sudo mv ./bin/trivy /usr/local/bin/
  
      - name: Run Trivy Scan
        run: |
          trivy image --severity HIGH,CRITICAL ${{ env.FRONTEND_IMAGE }} || exit 1

  ecr:
    name: store image
    runs-on: ubuntu-latest
    steps:
      - name: Authenticate Docker to ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.ECR_REPO }}

      - name: Push Docker Image to ECR
        run: |
          docker tag ${{ env.FRONTEND_IMAGE }} ${{ env.ECR_REPO }}:${{ github.run_number }}
          docker push ${{ env.ECR_REPO }}:${{ github.run_number }}